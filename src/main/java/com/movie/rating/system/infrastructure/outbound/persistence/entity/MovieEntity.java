package com.movie.rating.system.infrastructure.outbound.persistence.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

import java.time.Instant;
import java.util.UUID;

/**
 * R2DBC entity for the movies table.
 * Maps to the database table structure for movie persistence.
 */
@Table("movies")
public record MovieEntity(
        @Id
        UUID id,
        
        @Column("title")
        String title,
        
        @Column("plot")
        String plot,
        
        @Column("year_of_release")
        Integer yearOfRelease,
        
        @Column("is_active")
        Boolean isActive,
        
        @Column("created_by")
        UUID createdBy,
        
        @Column("created_at")
        Instant createdAt,
        
        @Column("updated_at")
        Instant updatedAt,
        
        @Column("deactivated_at")
        Instant deactivatedAt,
        
        @Column("deactivated_by")
        UUID deactivatedBy
) {
    
    /**
     * Create a new MovieEntity with default values.
     */
    public static MovieEntity create(String title, String plot, Integer yearOfRelease, UUID createdBy) {
        Instant now = Instant.now();
        return new MovieEntity(
                null, // ID will be generated by database
                title,
                plot,
                yearOfRelease,
                true, // Active by default
                createdBy,
                now,
                now,
                null, // Not deactivated
                null  // No deactivator
        );
    }
    
    /**
     * Create an updated version of this entity.
     */
    public MovieEntity withUpdates(String newTitle, String newPlot, Integer newYearOfRelease) {
        return new MovieEntity(
                this.id,
                newTitle != null ? newTitle : this.title,
                newPlot != null ? newPlot : this.plot,
                newYearOfRelease != null ? newYearOfRelease : this.yearOfRelease,
                this.isActive,
                this.createdBy,
                this.createdAt,
                Instant.now(), // Updated timestamp
                this.deactivatedAt,
                this.deactivatedBy
        );
    }
    
    /**
     * Create a deactivated version of this entity.
     */
    public MovieEntity deactivate(UUID deactivatedBy) {
        return new MovieEntity(
                this.id,
                this.title,
                this.plot,
                this.yearOfRelease,
                false, // Mark as inactive
                this.createdBy,
                this.createdAt,
                Instant.now(), // Updated timestamp
                Instant.now(), // Deactivated timestamp
                deactivatedBy
        );
    }
    
    /**
     * Create a reactivated version of this entity.
     */
    public MovieEntity reactivate() {
        return new MovieEntity(
                this.id,
                this.title,
                this.plot,
                this.yearOfRelease,
                true, // Mark as active
                this.createdBy,
                this.createdAt,
                Instant.now(), // Updated timestamp
                null, // Clear deactivation timestamp
                null  // Clear deactivator
        );
    }
}
