package com.movie.rating.system.infrastructure.outbound.persistence.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

import java.time.Instant;
import java.util.UUID;

/**
 * R2DBC entity for the movie_ratings table.
 * Maps to the database table structure for movie rating persistence.
 */
@Table("movie_ratings")
public record MovieRatingEntity(
        @Id
        UUID id,
        
        @Column("movie_id")
        UUID movieId,
        
        @Column("user_id")
        UUID userId,
        
        @Column("rating")
        Integer rating,
        
        @Column("review")
        String review,
        
        @Column("is_active")
        Boolean isActive,
        
        @Column("created_at")
        Instant createdAt,
        
        @Column("updated_at")
        Instant updatedAt
) {
    
    /**
     * Create a new MovieRatingEntity with default values.
     */
    public static MovieRatingEntity create(UUID movieId, UUID userId, Integer rating, String review) {
        Instant now = Instant.now();
        return new MovieRatingEntity(
                null, // ID will be generated by database
                movieId,
                userId,
                rating,
                review,
                true, // Active by default
                now,
                now
        );
    }
    
    /**
     * Create an updated version of this entity.
     */
    public MovieRatingEntity withUpdates(Integer newRating, String newReview) {
        return new MovieRatingEntity(
                this.id,
                this.movieId,
                this.userId,
                newRating != null ? newRating : this.rating,
                newReview != null ? newReview : this.review,
                this.isActive,
                this.createdAt,
                Instant.now() // Updated timestamp
        );
    }
    
    /**
     * Create a deactivated version of this entity.
     */
    public MovieRatingEntity deactivate() {
        return new MovieRatingEntity(
                this.id,
                this.movieId,
                this.userId,
                this.rating,
                this.review,
                false, // Mark as inactive
                this.createdAt,
                Instant.now() // Updated timestamp
        );
    }
    
    /**
     * Create a reactivated version of this entity.
     */
    public MovieRatingEntity reactivate() {
        return new MovieRatingEntity(
                this.id,
                this.movieId,
                this.userId,
                this.rating,
                this.review,
                true, // Mark as active
                this.createdAt,
                Instant.now() // Updated timestamp
        );
    }
}
